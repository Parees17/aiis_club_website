{"ast":null,"code":"var _jsxFileName = \"/Users/pareespradhan/Desktop/aiis_page/frontend/my-react-app/src/components/chatbot.jsx\",\n  _s = $RefreshSig$();\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   // Handle input change\n//   const handleChange = (e) => {\n//     setInput(e.target.value);\n//   };\n\n//   // Send message to the backend\n//   const sendMessage = async () => {\n//     if (input.trim() === \"\") return;\n\n//     const userMessage = { text: input, sender: \"user\", timestamp: new Date() };\n//     setMessages([...messages, userMessage]);\n\n//     // Call the chatbot backend\n//     try {\n//       const response = await fetch(BASE_URL + \"/chatbot\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ message: input }),\n//       });\n\n//       const data = await response.json();\n//       const botMessage = { text: data.reply, sender: \"bot\", timestamp: new Date() };\n//       setMessages((prevMessages) => [...prevMessages, botMessage]);\n\n//     } catch (error) {\n//       console.error(\"Error fetching chatbot response:\", error);\n//     }\n\n//     setInput(\"\");\n//   };\n\n//   // Render messages in chat bubbles\n//   const renderMessages = () =>\n//     messages.map((msg, index) => (\n//       <div key={index} className={`message ${msg.sender === \"user\" ? \"user-message\" : \"bot-message\"}`}>\n//         <div className=\"message-text\">{msg.text}</div>\n//         <div className=\"message-timestamp\">{msg.timestamp.toLocaleTimeString()}</div>\n//       </div>\n//     ));\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <img src=\"../img/AIClubLogoOrthoRenderV11.png\" alt=\"Avatar\" className=\"avatar\" />\n//         <span className=\"status-online\">Online</span>\n//       </div>\n\n//       <div className=\"chat-body\">\n//         {renderMessages()}\n//       </div>\n\n//       <div className=\"chat-footer\">\n//         <input\n//           type=\"text\"\n//           className=\"form-control\"\n//           value={input}\n//           onChange={handleChange}\n//           placeholder=\"Type a message...\"\n//         />\n//         <button className=\"btn btn-primary\" onClick={sendMessage}>\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React, { useState } from 'react';\nimport './chatbot.css'; // Custom CSS for styling\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BASE_URL } from \"../App\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const handleSendMessage = async () => {\n    if (input.trim() === '') return;\n    const userMessage = {\n      role: 'user',\n      content: input\n    };\n    setMessages([...messages, userMessage]);\n    try {\n      const response = await axios.post('/api/chatbot', {\n        message: input\n      });\n      const botMessage = {\n        role: 'bot',\n        content: response.data.message\n      };\n      setMessages([...messages, userMessage, botMessage]);\n    } catch (error) {\n      console.error('Error fetching chatbot response:', error);\n      const errorMessage = {\n        role: 'bot',\n        content: 'Oops! Something went wrong.'\n      };\n      setMessages([...messages, userMessage, errorMessage]);\n    }\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chatbot-avatar\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/path/to/avatar-image.png\",\n            alt: \"Chatbot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chatbot-name\",\n          children: \"MyChatAgent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chatbot-status\",\n          children: \"Online\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${message.role === 'user' ? 'user' : 'bot'}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type a message\",\n        className: \"form-control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"btn btn-primary\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","BASE_URL","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","handleSendMessage","trim","userMessage","role","content","response","post","message","botMessage","data","error","console","errorMessage","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/pareespradhan/Desktop/aiis_page/frontend/my-react-app/src/components/chatbot.jsx"],"sourcesContent":["\n\n\n// const Chatbot = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState(\"\");\n\n//   // Handle input change\n//   const handleChange = (e) => {\n//     setInput(e.target.value);\n//   };\n\n//   // Send message to the backend\n//   const sendMessage = async () => {\n//     if (input.trim() === \"\") return;\n\n//     const userMessage = { text: input, sender: \"user\", timestamp: new Date() };\n//     setMessages([...messages, userMessage]);\n\n//     // Call the chatbot backend\n//     try {\n//       const response = await fetch(BASE_URL + \"/chatbot\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({ message: input }),\n//       });\n\n//       const data = await response.json();\n//       const botMessage = { text: data.reply, sender: \"bot\", timestamp: new Date() };\n//       setMessages((prevMessages) => [...prevMessages, botMessage]);\n\n//     } catch (error) {\n//       console.error(\"Error fetching chatbot response:\", error);\n//     }\n\n//     setInput(\"\");\n//   };\n\n//   // Render messages in chat bubbles\n//   const renderMessages = () =>\n//     messages.map((msg, index) => (\n//       <div key={index} className={`message ${msg.sender === \"user\" ? \"user-message\" : \"bot-message\"}`}>\n//         <div className=\"message-text\">{msg.text}</div>\n//         <div className=\"message-timestamp\">{msg.timestamp.toLocaleTimeString()}</div>\n//       </div>\n//     ));\n\n//   return (\n//     <div className=\"chat-container\">\n//       <div className=\"chat-header\">\n//         <img src=\"../img/AIClubLogoOrthoRenderV11.png\" alt=\"Avatar\" className=\"avatar\" />\n//         <span className=\"status-online\">Online</span>\n//       </div>\n\n//       <div className=\"chat-body\">\n//         {renderMessages()}\n//       </div>\n\n//       <div className=\"chat-footer\">\n//         <input\n//           type=\"text\"\n//           className=\"form-control\"\n//           value={input}\n//           onChange={handleChange}\n//           placeholder=\"Type a message...\"\n//         />\n//         <button className=\"btn btn-primary\" onClick={sendMessage}>\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chatbot;\n\nimport React, { useState } from 'react';\nimport './chatbot.css'; // Custom CSS for styling\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BASE_URL } from \"../App\";\nimport axios from 'axios';\n\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const handleSendMessage = async () => {\n    if (input.trim() === '') return;\n\n    const userMessage = { role: 'user', content: input };\n    setMessages([...messages, userMessage]);\n\n    try {\n      const response = await axios.post('/api/chatbot', { message: input });\n      const botMessage = { role: 'bot', content: response.data.message };\n      setMessages([...messages, userMessage, botMessage]);\n    } catch (error) {\n      console.error('Error fetching chatbot response:', error);\n      const errorMessage = { role: 'bot', content: 'Oops! Something went wrong.' };\n      setMessages([...messages, userMessage, errorMessage]);\n    }\n\n    setInput('');\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chat-header\">\n        <div className=\"chat-header-content\">\n          <span className=\"chatbot-avatar\">\n            <img src=\"/path/to/avatar-image.png\" alt=\"Chatbot\" />\n          </span>\n          <span className=\"chatbot-name\">MyChatAgent</span>\n          <span className=\"chatbot-status\">Online</span>\n        </div>\n      </div>\n\n      <div className=\"chat-body\">\n        {messages.map((message, index) => (\n          <div key={index} className={`chat-message ${message.role === 'user' ? 'user' : 'bot'}`}>\n            <span>{message.content}</span>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type a message\"\n          className=\"form-control\"\n        />\n        <button onClick={handleSendMessage} className=\"btn btn-primary\">Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}