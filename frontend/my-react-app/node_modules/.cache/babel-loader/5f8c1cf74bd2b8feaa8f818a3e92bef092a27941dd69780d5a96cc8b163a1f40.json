{"ast":null,"code":"import React,{useState}from\"react\";import\"bootstrap/dist/css/bootstrap.min.css\";import\"./chatbot.css\";// We will create a custom CSS file to style the chat messages.\nimport{BASE_URL}from\"../App\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chatbot=()=>{const[messages,setMessages]=useState([]);const[input,setInput]=useState(\"\");// Handle input change\nconst handleChange=e=>{setInput(e.target.value);};// Send message to the backend\nconst sendMessage=async()=>{if(input.trim()===\"\")return;const userMessage={text:input,sender:\"user\",timestamp:new Date()};setMessages([...messages,userMessage]);// Call the chatbot backend\ntry{const response=await fetch(\"http://localhost:5000/api/chatbot\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({message:input})});const data=await response.json();const botMessage={text:data.reply,sender:\"bot\",timestamp:new Date()};setMessages(prevMessages=>[...prevMessages,botMessage]);}catch(error){console.error(\"Error fetching chatbot response:\",error);}setInput(\"\");};// Render messages in chat bubbles\nconst renderMessages=()=>messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${msg.sender===\"user\"?\"user-message\":\"bot-message\"}`,children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:msg.text}),/*#__PURE__*/_jsx(\"div\",{className:\"message-timestamp\",children:msg.timestamp.toLocaleTimeString()})]},index));return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"../img/AIClubLogoOrthoRenderV11.png\",alt:\"Avatar\",className:\"avatar\"}),/*#__PURE__*/_jsx(\"span\",{className:\"status-online\",children:\"Online\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-body\",children:renderMessages()}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-footer\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",value:input,onChange:handleChange,placeholder:\"Type a message...\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary\",onClick:sendMessage,children:\"Send\"})]})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","BASE_URL","jsx","_jsx","jsxs","_jsxs","Chatbot","messages","setMessages","input","setInput","handleChange","e","target","value","sendMessage","trim","userMessage","text","sender","timestamp","Date","response","fetch","method","headers","body","JSON","stringify","message","data","json","botMessage","reply","prevMessages","error","console","renderMessages","map","msg","index","className","children","toLocaleTimeString","src","alt","type","onChange","placeholder","onClick"],"sources":["/Users/pareespradhan/Desktop/aiis_page/frontend/my-react-app/src/components/chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./chatbot.css\"; // We will create a custom CSS file to style the chat messages.\nimport { BASE_URL } from \"../App\";\n\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // Handle input change\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // Send message to the backend\n  const sendMessage = async () => {\n    if (input.trim() === \"\") return;\n\n    const userMessage = { text: input, sender: \"user\", timestamp: new Date() };\n    setMessages([...messages, userMessage]);\n\n    // Call the chatbot backend\n    try {\n      const response = await fetch(\"http://localhost:5000/api/chatbot\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ message: input }),\n      });\n\n      const data = await response.json();\n      const botMessage = { text: data.reply, sender: \"bot\", timestamp: new Date() };\n      setMessages((prevMessages) => [...prevMessages, botMessage]);\n\n    } catch (error) {\n      console.error(\"Error fetching chatbot response:\", error);\n    }\n\n    setInput(\"\");\n  };\n\n  // Render messages in chat bubbles\n  const renderMessages = () =>\n    messages.map((msg, index) => (\n      <div key={index} className={`message ${msg.sender === \"user\" ? \"user-message\" : \"bot-message\"}`}>\n        <div className=\"message-text\">{msg.text}</div>\n        <div className=\"message-timestamp\">{msg.timestamp.toLocaleTimeString()}</div>\n      </div>\n    ));\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        <img src=\"../img/AIClubLogoOrthoRenderV11.png\" alt=\"Avatar\" className=\"avatar\" />\n        <span className=\"status-online\">Online</span>\n      </div>\n\n      <div className=\"chat-body\">\n        {renderMessages()}\n      </div>\n\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={input}\n          onChange={handleChange}\n          placeholder=\"Type a message...\"\n        />\n        <button className=\"btn btn-primary\" onClick={sendMessage}>\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}